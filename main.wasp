app Valid {
  wasp: {
    version: "^0.11.4"
  },
  title: "Valid",
  client: {
    rootComponent: import { Layout } from "@client/Layout.jsx",
  },
  db: {
    prisma: {
      clientPreviewFeatures: ["extendedWhereUnique"]
    }
  },
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  },
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/pages/auth/Login.jsx"
}
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@client/pages/auth/Signup.jsx"
}

entity User {=psl
    id             Int            @id @default(autoincrement())
    username       String         @unique
    email          String         @unique
    password       String
    preferences    Json
    todos          Todo[]
    savedResources Resource[]
    journalEntries JournalEntry[]
psl=}

entity Todo {=psl
    id      Int     @id @default(autoincrement())
    content String
    isDone  Boolean @default(false)
    user    User    @relation(fields: [userId], references: [id])
    userId  Int
psl=}

entity Resource {=psl
    id     Int    @id @default(autoincrement())
    title  String
    url    String
    topic  String
    user   User   @relation(fields: [userId], references: [id])
    userId Int
psl=}

entity JournalEntry {=psl
    id      Int      @id @default(autoincrement())
    content String
    date    DateTime @default(now())
    user    User     @relation(fields: [userId], references: [id])
    userId  Int
psl=}

action createTodo {
  fn: import { createTodo } from "@server/actions.js",
  entities: [Todo]
}

action completeTodo {
  fn: import { completeTodo } from "@server/actions.js",
  entities: [Todo]
}

action createJournalEntry {
  fn: import { createJournalEntry } from "@server/actions.js",
  entities: [JournalEntry]
}

action saveResource {
  fn: import { saveResource } from "@server/actions.js",
  entities: [Resource]
}

action updatePreferences {
  fn: import { updatePreferences } from "@server/actions.js",
  entities: [User]
}

query getTodos {
  fn: import { getTodos } from "@server/queries.js",
  entities: [Todo]
}

query getResources {
  fn: import { getResources } from "@server/queries.js",
  entities: [Resource]
}

query getJournalEntries {
  fn: import { getJournalEntries } from "@server/queries.js",
  entities: [JournalEntry]
}

query getUser {
  fn: import { getUser } from "@server/queries.js",
  entities: [User]
}

route LandingRoute { path: "/", to: LandingPage }
page LandingPage {
  component: import { Landing } from "@client/pages/Landing.jsx"
}

route DashboardRoute { path: "/dashboard", to: DashboardPage }
page DashboardPage {
  component: import { DashboardPage } from "@client/pages/Dashboard.jsx",
  authRequired: true
}

route ResourcesRoute { path: "/resources", to: ResourcesPage }
page ResourcesPage {
  component: import { Resources } from "@client/Resources.jsx",
  authRequired: true
}

route JournalRoute { path: "/journal", to: JournalPage }
page JournalPage {
  component: import { Journal } from "@client/pages/Journal.jsx",
  authRequired: true
}

route SettingsRoute { path: "/settings", to: SettingsPage }
page SettingsPage {
  component: import { Settings } from "@client/pages/Settings.jsx",
  authRequired: true
}
